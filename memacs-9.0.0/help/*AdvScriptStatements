~bStatements~0

Several types of statements are available for use in scripts, including ones for
looping and conditional execution.  All "statement keywords" must be the first
word on a line (optionally preceded by white space), and must have either white
space or a left paren between their names and their argument(s), if any.  The
one exception is ~bmacro~0, which must be followed by white space.

Following is a list of all statements and their usage.  Keywords and literal
characters are shown in ~bbold~0 and parameters are ~uunderlined~U:

    ~bmacro~0 ~uname~U[~b(~0 [~umin-arg-count~U [~b,~0 [~umax-arg-count~U]]] ~b)~0] [~b{~0 [~busage:~0 ~ustring~U] [~b,~0]
     [~bdesc:~0 ~ustring~U] ~b}~0]
        Begin a macro definition.  If the ~umin-arg-count~U or ~umax-arg-count~U
        expression is specified, it must evaluate to a non-negative integer and
        the macro must be called with no fewer than ~umin-arg-count~U and no more
        than ~umax-arg-count~U arguments or an error will occur.  If only
        ~umin-arg-count~U is specified, the macro must be called with exactly
        ~umin-arg-count~U arguments.  If ~umin-arg-count~U is specified followed by a
        comma, the macro may be called with ~umin-arg-count~U arguments or more.
        Lastly, if neither argument count is specified, the macro may be called
        with any number of arguments (including none).

        If the ~busage~0 or ~bdesc~0 (description) value is specified, the expression
        must evaluate to a non-null string.  Neither, one, or both may be
        specified, in any order, enclosed in braces ~b{ }~0.  The ~busage~0 value is
        the argument syntax and the ~bdesc~0 value describes the macro's
        purpose; for example:

            macro fenceWord(1) {usage: 'char',desc: 'Wrap a pair of fences\
             around [-]n word(s)'}

        The ~busage~0 and ~bdesc~0 values are shown with the macro name in the help
        text produced by the ~uapropos~U and ~ushowMacros~U commands.

    ~bendmacro~0
    	End the definition of the most recent macro being defined, which is
    	determined by locating the most recent unpaired ~bmacro~0 keyword.  (Macro
    	definitions may be nested; that is, a macro can define a macro when it
    	is executed.)

    ~bif~0 ~uand-or-expr~U
        Begin an "if" statement.  Execution continues if ~uand-or-expr~U evaluates
        to true.

    ~belsif~0 ~uand-or-expr~U
        Specify an "else if" statement for the most recent unpaired ~bif~0 keyword.
        The condition is true if ~uand-or-expr~U evaluates to true and the paired ~bif~0
        and any prior ~belsif~0 clauses that follow the ~bif~0 were false.  Zero or more
        consecutive ~belsif~0 keywords may follow an ~bif~0.

    ~belse~0
        Specify an "else" statement, which is true if the paired ~bif~0 and any
        ~belsif~0 clauses that follow the ~bif~0 were false.  Zero or one ~belse~0 keywords
        may follow an ~bif~0.

    ~bendif~0
        End an "if" statement, which is determined by locating the most recent
        unpaired ~bif~0 keyword.

    ~bfor~0 ~uvar~U ~bin~0 ~uarray-expr~U
        Begin a "for" statement.  ~uarray-expr~U is evaluated.  Then for each
        element in the array (which may be empty), the value is assigned to
        variable ~uvar~U and the block of statements following the keyword to
        its paired ~bendloop~0 is executed.  If the array is empty, the block is
        not executed and ~uvar~U is set to ~bnil~0.

    ~bwhile~0 ~uand-or-expr~U
        Begin a "while" statement.  The block of statements following the
        keyword to its paired ~bendloop~0 is executed while its condition is
        true (zero or more times).

    ~buntil~0 ~uand-or-expr~U
        Begin an "until" statement.  The block of statements following the
        keyword to its paired ~bendloop~0 is executed until its condition is
        true (zero or more times).

    ~bloop~0
        Begin a "loop" statement.  The block of statements following the keyword
        to its paired ~bendloop~0 is executed an indefinite number of times (one or
        more).  The block must contain at least one ~bbreak~0 or ~breturn~0 statement to
        prevent an endless do loop.

    ~bendloop~0
        End a "for", "while", "until", or "loop" statement, which is determined
        by locating the most recent unpaired ~bfor~0, ~bwhile~0, ~buntil~0, or ~bloop~0 keyword.

    ~bnext~0
        Transfer control to the end of the enclosing loop block and begin the
        next iteration, which causes immediate evaluation of the loop condition
        if the block is a ~bwhile~0 or ~buntil~0 statement, and processing of the next
        array element if the block is a ~bfor~0 statement.

    ~bbreak~0 [~uint-expr~U]
        Break out of one (the default) or more enclosing loop blocks, determined
        by ~uint-expr~U if specified, which must evaluate to an integer greater than
        zero.  Control is transferred to the end of the last block that is
        exited.

    ~breturn~0 [~uand-or-expr~U]
        Exit a macro or executing buffer and return to the caller.  The return
        value is ~uand-or-expr~U if specified; otherwise, ~bnil~0.

    ~bforce~0 ~uand-or-expr~U
        Force the successful evaluation of ~uand-or-expr~U; that is, ignore any
        error which may occur.
