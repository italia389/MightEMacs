~bExpressions and Aliases~B

MightEMacs expressions are very similar to those used in the C language.  All
operators and their associativity are listed in the following table in order of
precedence, highest to lowest.

~bPrecedence~B  ~bOperator~B    ~bDescription~B                                ~bAssociativity~B
================================================================================
            ++          Suffix increment                           Left-to-right
            --          Suffix decrement
1           ()          Function call
            whitespace  Function call
            []          Array subscripting
--------------------------------------------------------------------------------
            ++          Prefix increment                           Right-to-left
            --          Prefix decrement
            +           Unary plus
2           -           Unary minus
            !           Logical NOT
            ~           Bitwise NOT (one's complement)
--------------------------------------------------------------------------------
            *           Multiplication                             Left-to-right
3           /           Division
            %           Modulo (if first operand is integer)
--------------------------------------------------------------------------------
4           +           Addition                                   Left-to-right
            -           Subtraction
--------------------------------------------------------------------------------
5           =>          Numeric prefix (n)                         Left-to-right
--------------------------------------------------------------------------------
6           <<          Bitwise left shift                         Left-to-right
            >>          Bitwise right shift
--------------------------------------------------------------------------------
7           &           Bitwise AND (if both operands are          Left-to-right
                        integers)
--------------------------------------------------------------------------------
8           |           Bitwise OR (inclusive or)                  Left-to-right
            ^           Bitwise XOR (exclusive or)
--------------------------------------------------------------------------------
9           %           String formatting (if first operand is     Left-to-right
                        string)
--------------------------------------------------------------------------------
10          &           Concatenation (if first operand is         Left-to-right
                        string)
--------------------------------------------------------------------------------
            <           Less than                                  Left-to-right
11          <=          Less than or equal to
            >           Greater than
            >=          Greater than or equal to
--------------------------------------------------------------------------------
            <=>         Comparison                                 Left-to-right
            ==          Equal to
12          !=          Not equal to
            =~          RE equal to
            !~          RE not equal to
--------------------------------------------------------------------------------
13          &&          Logical AND                                Left-to-right
--------------------------------------------------------------------------------
14          ||          Logical OR                                 Left-to-right
--------------------------------------------------------------------------------
15          ?:          Ternary conditional                        Right-to-left
--------------------------------------------------------------------------------
            =           Direct assignment                          Right-to-left
            +=          Assignment by sum
            -=          Assignment by difference
            *=          Assignment by product
            /=          Assignment by quotient
16          %=          Assignment by remainder
            <<=         Assignment by bitwise left shift
            >>=         Assignment by bitwise right shift
            &=          Assignment by bitwise AND
            |=          Assignment by bitwise OR
            ^=          Assignment by bitwise XOR
--------------------------------------------------------------------------------
17          not         Logical NOT (low precedence)               Right-to-left
--------------------------------------------------------------------------------
18          or          Logical OR (low precedence)                Left-to-right
            and         Logical AND (low precedence)
--------------------------------------------------------------------------------

Here are some examples:

    x = join(':',ARGV)                  # Function call using parentheses.
    x = join ':',ARGV                   # Function call using white space.

    # Insert at point: i times 2, a period, and a menu item without moving point,
    # and increment i.
    0 => insert '%2d' % 2 * i++,'. ',menuItem

    # Insert a title centered in current terminal width.
    insert sprintf('%*s%s',($TermCols - length(title)) / 2,'',title)

    # Get a pathname from current line (from point to end of line), save it in
    # "path" variable, and open the file in another window.
    2 => findFile(path = subline 0)

    # Append a string containing interpolated variable "y" to current line.
    $lineText &= ", y = #{y}"

    # Get filename from user with non-auto-completion.  If nothing is entered,
    # return to caller.
    if empty?(filename = prompt 'File',nil,'^f')
        return
    endif

    # Strip '.sh' extension from a filename, if present.
    substr(filename,-3) == '.sh' and filename = substr(filename,0,-3)

Note that parentheses may generally be omitted in function calls as long as the
name is followed by white space; however, they may be required in certain
instances to avoid ambiguity.  The word "function" in the table includes
commands, macros, and aliases.

It is also possible to create an alias of a command, macro, or function with the
~ualias~U (~#uC-c C-a~U) command.  An alias of a command or macro has the same
functionality as its counterpart, except that it cannot be bound to a key.  An
alias of a function can only be used in a script or ~ueval~U command line.

An alias can be deleted with the ~udeleteAlias~U (~#uC-c C-a~U) command.

Lastly, an expression can be built in a script (as a string) and executed with
the ~ueval~U (~#uESC C-x~U) command.  For example, consider the following MScript
snippet:

    label = ($0 == defn) ? 'search' : 'replace'
    pat = prompt "#{titleCaseString label} pattern"
    eval '$',label,"Pat = '",pat,"'"

The user is prompted for a search or replacement pattern and the $searchPat or
$replacePat variable is set to the result according to the n argument ($0).
