~bTerminal Attributes~B

MightEMacs provides the ability to display text in bold, underlined, reverse
video, or color (or all four) in a window or on the message line.  This is
accomplished by coding special "terminal attribute specifications" in the text
that begin with a tilde (~u~~~U) character.  These specifications turn attributes on
or off at the point in the text where they are entered.  Attribute
specifications may be any of the following:

    ~~b        Begin bold.
    ~~B        End bold.
    ~~~un~Uc       Begin color with color pair number ~un~U.
    ~~C        End color.
    ~~r        Begin reverse video.
    ~~R        End reverse video.
    ~~u        Begin underline.
    ~~#u       Begin underline, skipping spaces.
    ~~U        End underline.
    ~~Z        End all attributes.
    ~~~~        Display literal "~~" character.

To display bolded, reversed, and/or underlined text in a window, do the
following:

    1.  Make the window the current window and enter the desired terminal
        attribute specifications into its buffer.
    2.  Enable processing of the attribute specifications by setting the
        "TermAttr" buffer attribute via the ~ualterBufAttr~U (~#uC-x a~U) command.

Once this is done, the attribute specifications will be converted to the
correspoinding terminal attributes whenever the buffer is displayed in a window.
However, note the following:

    *   The current line in the current window is always displayed in "raw"
        form so that it can be edited.
    *   Attribute specifications will not be converted if the window displaying
        the buffer is horizontally shifted, including a pop-up window.

The process is similar to enable terminal attributes on the message line.  Any
attribute specifications in text produced by the ~umessage~U, ~uprint~U, ~uprintf~U, and
~uprompt~U functions will be converted if the function is called with n >= 0.


~bColor Attribute~B

Colored text can be displayed in a buffer or on the message line using the same
technique described above; however, it is intended for use in a script and
requires that the desired colors be set up first.  The ~usetColorPair~U function
must be called to define one or more color pairs.  A color pair is a foreground
color and a background color.  Colors are integer numbers in the range -1..n,
where n (typically 255) is dependent on the current terminal capabilities.
Color -1 is the default foreground or background color, and 0 is black.  To see
all colors available for your terminal, press ~#uC-h C~U (~ushowColors~U).

After calling ~usetColorPair~U to obtain a pair number, the number is then used in a
~~~un~Uc specification to turn on the specific foreground and background colors,
followed by the text you want to display, followed by a ~~C specification to turn
color off.  For example, consider the following code snippet:

    pair = setColorPair(0,0,11)     # Black text on yellow background.
    text = sprintf('~~%uc black on yellow ~~C',pair)
    insert text

The first line obtains the next available color pair number and the second line
inserts " black on yellow " into the current buffer at point, with black text on
a yellow background.  The colors will be displayed as long as the "TermAttr"
buffer attribute is enabled (as described previously).  Likewise,

    1 => print text

will display the same colored text on the message line.

Note that the color terminal attribute can be freely intermixed with other
attributes if desired.  Note also that color pair numbers are somewhat
transitory and may be reused and redefined at any time.  (A finite number of
pair numbers are available which are doled out in sequence in a circular
fashion.)  Consequently, you should always call ~usetColorPair~U in your scripts
just prior to displaying colored text to ensure that a pair number used
previously was not redefined.  Color pairs currently in use can be displayed at
any time by calling the ~ushowColors~U (~#uC-h C~U) command with a negative numeric
prefix.  Additionally, the number of colors and color pairs available can be
obtained in a script via "getInfo 'Colors'", which returns the values as a
two-element array.
