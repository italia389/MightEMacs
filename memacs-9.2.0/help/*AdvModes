~bModes~B

As discussed previously, MightEMacs uses ~bglobal~B and ~bbuffer~B modes to activate and
deactivate features during the editing session.  Following is a list of all
built-in modes and user modes defined in the standard libraries, and a detailed
description of each:

GLOBAL MODES

    ~bASave~B       Automatically save all changed buffers (including hidden, non-
                macro ones) after $autoSave keystrokes have been entered.  If
                $autoSave is set to zero, this mode is disabled and cannot be
                reenabled until $autoSave is set to a value greater than zero.
    ~bClob~B        Allow macros to be "clobbered"; that is, recreated.  When
                enabled, any macro buffer of the same name as a macro being
                defined will be silently overwritten with the new macro's
                contents; otherwise, the definition will fail and an error will
                be displayed.
    ~bExact~B       Perform case-sensitive buffer searches by default.  This can be
                overridden by appending the "i" (ignore) option character to the
                search pattern.
    ~bFence~B       Highlight left fence briefly with cursor when a right fence is
                typed.  Fence pairs are {}, (), and [].
    ~bHScrl~B       When the displayed length of the current line in the current
                window is greater than the terminal width and the point is moved
                past the right edge of the screen, scroll all lines in the
                window simultaneously; otherwise, scroll just the current line.
    ~bMsg~B         Enable the display of messages on the message line.  This mode
                can be disabled in a script to suppress extraneous messages
                (which flicker on the message line) during script execution.
                However, the mode is always enabled when control is returned to
                the user just prior to reading the next key or key sequence.
    ~bRegexp~B      Perform regular expression buffer searches by default.  This
                can be overridden by appending the "p" (plain) option character
                to the search pattern.
    ~bRFIndt~B      Use Ratliff-style indentation of right fence character when a
                language buffer mode is enabled; that is, indent a '}', ']', or
                ')' at the same indentation level as the nested line block it
                terminates instead of aligning it with the statement header (the
                previous level).  The right fence must be entered on a line by
                itself and be defined as a "trigger" character in the
                initialization file for the particular language mode, like "C"
                or "Java".
    ~bSafe~B        When saving a buffer to disk, do the following:
                    1.  Write the buffer to a temporary file.
                    2.  Delete any existing file of the same name as the buffer's
                        filename.
                    3.  Rename the temporary file to the buffer's filename.
                This eliminates the possibility of data loss if an OS error
                occurs when the file is opened for output or written.
    ~bWkDir~B       Display the current working directory on the mode line at the
                bottom of the screen if room is available.

BUILT-IN BUFFER MODES

    ~bATerm~B       Automatically "terminate" a buffer when saving it to disk;
                that is, if the buffer is not empty and there is not a line
                delimiter at the end of the last line of the buffer, add one
                before it is written to disk.
    ~bBak~B         When saving a buffer to disk, if the file already exists and
                "file.bak" does not exist, rename the existing file to
                "file.bak" before saving the buffer.  Otherwise, overwrite any
                existing file.
    ~bCol~B         Display column number of point on mode line in form "C:n", where
                n is the column number.
    ~bLine~B        Display line number of point on mode line in form "L:n", where
                n is the line number.
    ~bOver~B        Overwrite columns when typing.  Hard tabs are replaced only
                when the point is at a column immediately preceding a tab stop.
    ~bRdOnly~B      Buffer is in read-only mode and cannot be modified.
    ~bRepl~B        Replace characters when typing.  Hard tabs are replaced just
                like any other character.
    ~bWrap~B        Wrap words to the next line automatically as you type.  (See the
                ~bLine Wrapping~B section for details.)

Note that when the "Over" or "Repl" buffer mode is enabled, non-tab characters
are replaced as you type; that is, the "self insert" pseudo-command deletes the
character at point before inserting the new one.  You can force an "insert"
however, by using a negative numeric prefix.  For example, if you entered ~#uC-_ x~U,
the letter ~ux~U would be ~binserted~B into the text, overriding the "Over" and "Repl"
buffer modes.  If you entered ~#uC-_ 3 x~U, three copies would be inserted.  This
works for all characters bound to self insert.

USER-DEFINED BUFFER MODES (Language Modes)

    ~bC, HTML, Java, JS, MScript, Perl, PHP, PList, Python, Ruby, Shell, Swift~B
                Load language library (macros) if available, enable "Fence"
                global mode, and enable automatic indentation when the ~ureturn~U
                key or certain other keys defined for the particular mode are
                typed.


~bMode Groups~B

In addition to enabling and disabling features with modes, MightEMacs provides a
means to categorize similar modes so that only one can be enabled at any given
time.  This is done by putting like modes in a ~bmode group~B.  For example, the
built-in "Typeover" group contains the "Repl" and "Over" modes mentioned above.
It makes no sense for both of these modes to be enabled at the same time, so
they are put into a mode group to prevent that from happening.  (When a mode in
a group is enabled, any other mode in the same group that is enabled is
automatically disabled.)  Note also that all modes in a mode group must be of
the same type; that is, ~bglobal~B or ~bbuffer~B.  The first member of a group
determines the group's type.

Both modes and mode groups have ~battributes~B, which set various aspects of
them; for example, whether a mode is shown on the mode line.  Attributes are
edited with the ~ueditMode~U (~#uC-c m~U) command for modes and the ~ueditModeGroup~U (~#uC-c g~U)
command for mode groups.  These commands are also used to create and delete
modes and groups.  Both commands accept a mode or group name followed by zero or
more string arguments in form "keyword: value" where "keyword" is one of the
words listed below, and "value" is "true", "false", "nil", or text, depending on
the kind of attribute.  (If either command is invoked interactively, one
attribute is prompted for and processed.)  If the named mode or group does not
exist, it is created if n > 0; otherwise, an error is returned.  If n <= 0, the
mode or group is deleted and no attribute arguments are allowed.

All mode and group attributes, their data types, and a description of each are
listed below.

MODE ATTRIBUTES

    ~bbuffer~B          Boolean         Designate mode as a "buffer" mode if true;
                                    otherwise, "global".
    ~bdescription~B     String          Set mode description, which is shown in the
                                    ~ushowModes~U display.
    ~bglobal~B          Boolean         Designate mode as a "global" mode if true;
                                    otherwise, "buffer".
    ~bgroup~B           String or nil   Make mode a member of given group if string
                                    (and remove from any other group it is
                                    currently a member of), or remove mode from
                                    group it is a member of (if any) if nil.
    ~bhidden~B          Boolean         Do not display on mode line when mode is
                                    enabled if true; otherwise, display it.
    ~bvisible~B         Boolean         Display on mode line when mode is enabled
                                    if true; otherwise, do not display it.

GROUP ATTRIBUTES

    ~bdescription~B     String          Set mode group description, which is shown
                                    in ~ushowModes~U display.
    ~bmodes~B           String or nil   Comma-separated list of modes to add to
                                    group if string; otherwise, remove all modes
                                    from group if nil.

Note that any mode or group that is created at runtime (including those created
in startup files) are designated as "user" modes or groups.  Compiled-in modes
and groups are "built-in".  As it turns out, built-in modes have one additional
attribute called ~bscope-lock~B.  If true, then that mode's type cannot be changed;
that is, it may not be changed from a global mode to a buffer mode or vice versa
(because it would make no sense to do so).  User modes on the other hand, have
no such restriction.  Additionally, user modes and groups may be deleted at any
time; whereas, built-in ones may not.  All mode and group attributes, including
scope-lock, are shown in the ~ushowModes~U display.

Changing the scope of a mode can be useful at times.  For example, if you were
editing several files at once and wanted to make backups of each when they were
saved, you could simply change the "Bak" buffer mode to a global mode and enable
it, instead of enabling it (as a buffer mode) in every buffer.
