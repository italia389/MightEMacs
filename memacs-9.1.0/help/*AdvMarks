~bMarks~0

During an editing session, you will often have the need to mark a "region" of
text so that you can perform some operation on it; for example, to delete or
copy it so that you can insert it elsewhere.  You may also want to mark your
place so you can easily return to it later.  To do this, you set a "mark" at the
current point location in the buffer, which is a single visible character of
your choosing (a letter, digit, or punctuation character) except a tilde (~u~~~U).
The period (dot) mark is special -- it is used to delineate a region.  A region
exists at all times and is defined as all text between the point and the "dot"
mark (which may may be none, if the point is at the mark).  When a buffer is
created, the mark is initially set to be at end of buffer.  Some commands
operate only on regions (like ~uindentRegion~U), and several will alternately
operate on all lines in the current region if a numeric prefix of zero is
specified for the command.

Note that each buffer has its own set of marks.  Therefore, if multiple windows
are displaying the same buffer, they will all have the same marks defined.  Note
also that a mark is a "char" type in a script (an 8-bit integer) and is usually
coded as a character literal; for example, ~u?.~U for the dot mark.  We will use
syntax '.' however to refer to the dot mark and others as well for readability.

The commands for managing marks are as follows:

    ~udeleteMark~U  ~#uC-x C-SPC~U       Delete a mark, or all marks if a numeric prefix
                                is specified.
    ~ugotoMark~U    ~#uESC SPC~U         Go to a mark.  If a numeric prefix is specified,
                                delete the mark after moving to it.
    ~umarkBuf~U     ~#uESC C-SPC~U       Mark the entire current buffer as the current
                                region (presumably for a subsequent region
                                command).
    ~usetMark~U     ~uC-SPC~U           Set a mark.  Default action is to set mark '.'
                                without prompting.  If a negative numeric
                                prefix is specified, sets mark '`'; if a non-
                                negative numeric prefix is specified, prompts
                                for the mark to set.
    ~ushowMarks~U   ~#uC-h SPC~U         Shows all marks set in the current buffer in a
                                pop-up window.
    ~uswapMark~U    ~#uC-x C-x~U         Swap point with a mark.  Obtains a mark in the
                                same manner as ~usetMark~U.

For example, to indent a block of lines, set mark '.' anywhere on the first (or
last) line by pressing ~uC-SPC~U, move the point to the other end of the line block,
then press ~#uESC )~U, optionally with a numeric prefix to specify the number of tab
stops.  To copy a block of lines to the kill ring instead, mark the block in the
same mannner, then press ~#uC-u C-u C-c C-l~U, which executes the ~ucopyLine~U command 
with a numeric prefix of zero.

As a final example, to save the point position and window framing at say, the
beginning of a routine called "myfunc" which is currently being displayed, press
~#uC-u C-SPC~U (setMark) and enter ~um~U (or some other character) at the prompt.  You
can then return to this exact location at any time (in any window displaying
this buffer) with the same window framing by pressing ~#uESC SPC~U and entering ~um~U
again.  You can also move back and forth between the current location and that
mark by entering ~#uC-u C-x C-x m~U (~uswapMark~U).  Lastly, a shortcut for moving
between two locations is to set mark '`' by pressing ~#uC-_ C-SPC~U, moving the point
elsewhere, then pressing ~#uC-_ C-x C-x~U.  Each time you enter the latter key
sequence, you will move to the other location in the buffer (mark '`').
