// (c) Copyright 2015 Richard W. Marinelli
//
// This work is licensed under the Creative Commons Attribution-NonCommercial 4.0 International License.
// To view a copy of this license, see the "License.txt" file included with this distribution or visit
// http://creativecommons.org/licenses/by-nc/4.0/legalcode.
//
// efunc.h	External function prototype declarations for MightEMacs.

// Functions called from multiple source files in alphabetical order.
extern int abortinp(void);
extern int abortOp(Value *rp,int n);
extern int aboutMM(Value *rp,int n);
extern int adjustmode(Value *rp,int n,int type,Value *valp);
extern int afind(char *anamep,int op,FABPtr *fab,Alias **app);
extern int aliasCM(Value *rp,int n);
extern int allowedit(bool edit);
extern int apropos(Value *mstrp,char *promptp);
#if 0
extern int asc_int(char *srcp,int *resultp,bool query);
#endif
extern int asc_long(char *srcp,long *resultp,bool query);
extern int backch(int n);
extern int backChar(Value *rp,int n);
extern int backLine(Value *rp,int n);
extern int backln(int n);
extern int backPage(Value *rp,int n);
extern int backWord(Value *rp,int n);
extern int bappend(Buffer *bufp,char *text);
extern int bclear(Buffer *bufp,uint flags,bool *clearedp);
extern Buffer *bdefault(bool backward,bool active);
extern int bdelete(Buffer *bufp,uint flags);
extern int beeper(Value *rp,int n);
extern int beginKeyMacro(Value *rp,int n);
extern int beginText(Value *rp,int n);
extern int begintxt(void);
extern int beline(Value *rp,int n,bool end);
extern int bfind(char *name,uint cflags,uint bflags,Buffer **bufpp,bool *createdp);
extern int bftab(int n);
extern int binary(char *key,char *(*tval)(),int tlength);
extern int bindKeyCM(Value *rp,int n);
extern int boundary(Dot *dotp,int dir);
extern int bpop(Buffer *bufp,bool altmodeline,bool endprompt);
extern int bscratch(char *rp,Buffer **bufpp);
extern Buffer *bsrch(char *bname,Buffer **bufpp);
extern int bswitch(Buffer *bufp);
extern int bufcount(void);
extern int bufop(Value *rp,int n,char *prmpt,int op,uint flag);
extern ulong bufsize(Buffer *bufp);
extern int bufWind(Buffer *bufp,char *bname,EWindow **winpp);
extern int bumpvar(ENode *np,bool incr,bool pre);
extern int camfind(char *namep,int op,uint type);
extern int caseline(int n,char *trantab);
extern int caseregion(int n,char *trantab);
extern int changedir(Value *rp,int n);
extern int chcase(int ch);
extern int chgtext(Value *rp,int n,Buffer *bufp,enum e_textedit t);
extern int chkcpy(char **destp,char *srcp,size_t destlen);
extern int clearBuf(Value *rp,int n);
extern void clearKeyMacro(bool stop);
extern int clearMark(Value *rp,int n);
extern void clfname(Buffer *bufp);
extern int complete(Value *rp,char *promptp,char *defvalp,uint cflags,uint maxlen,uint aflags);
extern int copyreg(Region *regp);
#if WORDCOUNT
extern int countWords(Value *rp,int n);
#endif
extern int cpause(int n);
extern int ctoec(int c);
extern int cycle_ring(int n,bool msg);
extern char *defnil(char *strp);
extern int deleteAlias(Value *rp,int n);
extern int deleteAM(char *promptp,int type,char *emsg);
extern int deleteBlankLines(Value *rp,int n);
extern int deleteBuf(Value *rp,int n);
extern int deleteMacro(Value *rp,int n);
extern int deleteScreen(Value *rp,int n);
extern int deleteTab(Value *rp,int n);
extern int deleteWind(Value *rp,int n);
extern int delwhite(void);
extern int derefn(Value *valp,char *namep);
extern int derefv(Value *valp,VDesc *vdp);
extern int detabLine(Value *rp,int n);
extern int dkregion(int n,bool kill);
extern int dobuf(Value *rp,int n,Buffer *bufp,char *runpath,uint flags);
extern int doestmt(Value *rp,char *clp,int termch,char **clpp);
extern int dofile(Value *rp,char *fname,int n,uint flags);
#if MMDEBUG & DEBUG_SCRDUMP
extern void dumpscreens(char *msg);
#endif
#if MMDEBUG & DEBUG_VALUE
void dumpvars(void);
#endif
extern char *dupchr(char *s,int c,int len);
extern int ectoc(int c);
extern char *ectos(int c,char *destp,bool spc);
extern int endKeyMacro(Value *rp,int n);
extern int endWord(Value *rp,int n);
extern int entabLine(Value *rp,int n);
extern int eopendir(char *fspec,char **fpp);
extern int ereaddir(void);
extern int ernd(void);
extern int eval(Value *rp,int n);
extern int evalslit(Value *rp,char *srcp);
extern int exechook(Value *rp,int n,HookRec *hrp,uint arginfo,...);
extern bool extrasym(void);
extern bool fabsearch(char *strp,FABPtr *fabp,uint selector);
extern void faceinit(WindFace *wfp,Line *lnp);
extern char *fbasename(char *name,bool withext);
extern char *fdirname(char *name);
extern int feval(Value *rp,int n,CmdFunc *cfp);
extern int fexist(char *fn);
extern int ffclose(bool otpfile);
extern int ffgetline(uint *lenp);
extern CmdFunc *ffind(char *cnamep);
extern int ffputline(char *buf,int buflen);
extern int ffropen(char *fn,bool required);
extern int ffwopen(char *fn,int mode);
extern int fileout(Value *rp,char *promptp,int mode);
extern char *fixnull(char *s);
extern int fmatch(int ch);
extern int forwch(int n);
extern int forwChar(Value *rp,int n);
extern int forwLine(Value *rp,int n);
extern int forwln(int n);
extern int forwPage(Value *rp,int n);
extern int forwWord(Value *rp,int n);
extern int ge_comma(ENode *np);
extern int getarg(Value *rp,char *promptp,char *defvalp,int terminator,uint aflags);
extern int getargCR(Value *rp,char *promptp);
extern KeyDesc *getbind(int c);
extern int getbuflist(Value *rp);
extern int getcam(char *promptp,uint selector,FABPtr *fabp,char *emsg);
extern int getcbn(Value *rp,char *promptp,char *defname,uint op,Buffer **bufpp,bool *createdp);
extern int getccol(void);
extern bool getcomma(bool required);
extern int getfile(Value *rp,int n,bool view);
extern enum e_sym getident(char **srcpp);
extern int getkey(int *keyp);
extern char *getkname(KeyDesc *kdp);
extern int getkseq(int *keyp,KeyDesc **kdpp);
extern long getlinenum(Buffer *bufp,Line *targlnp);
extern int getnum(char *promptp,int *np);
extern int getpath(Value *pathp,char *fname);
extern KeyDesc *getpentry(FABPtr *fabp);
extern int getregion(Region *regp,bool *allp);
extern int getregtext(Value *destp);
extern int getsym(void);
extern int gettermsize(ushort *colp,ushort *rowp);
extern int getwkdir(char **strpp,bool force);
extern int getwpos(void);
extern int gotoLine(Value *rp,int n);
extern int gotoMark(Value *rp,int n);
extern int gswind(Value *rp,int n,bool grow);
extern int gtfilename(Value *rp,char *promptp,uint flags);
extern bool havesym(enum e_sym sym,bool required);
extern bool havewhite(void);
extern int help(Value *rp,int n);
extern int huntBack(Value *rp,int n);
extern int huntForw(Value *rp,int n);
extern int ifile(char *fname,int n);
extern int indentRegion(Value *rp,int n);
extern void initchars(void);
extern int insertBuf(Value *rp,int n);
extern int insertFile(Value *rp,int n);
extern int insertLineI(Value *rp,int n);
extern int insertPipe(Value *rp,int n);
extern int inserti(Value *rp,int n);
extern int insnlspace(Value *rp,int n,bool nl);
extern int inspre(int c);
extern int insrfence(int c);
extern int instab(int n);
#if 0
extern char *int_asc(int n,char *destp);
#endif
extern bool intval(Value *vp);
extern bool intvar(VDesc *vdp);
extern bool inwind(EWindow *winp,Line *lnp);
extern bool inword(void);
extern int iortext(Value *vp,int n,enum e_textedit t,bool kill);
extern bool is_lower(int ch);
extern bool is_upper(int ch);
extern bool is_white(Line *lnp,int length);
extern bool isident1(int c);
extern bool isletter(int ch);
extern bool isnil(char *strp);
extern int join(Value *rp,Value *delimp,int reqct,bool keepall);
extern int joinLines(Value *rp,int n);
extern int joinWind(Value *rp,int n);
extern void kcycle(void);
extern int kdcbword(int n,int kdc);
extern bool kdcfencedreg(int kdc);
extern int kdcfword(int n,int kdc);
extern int kdcline(int n,int kdc);
extern int kdctext(int n,int kdc,Region *regp);
extern void kdelete(Kill *kp);
extern int kinsert(Kill *kp,int direc,int c);
extern void kprep(bool kill);
extern int lalloc(int used,Line **lnpp);
extern void lchange(Buffer *bufp,uint flags);
extern int ldelete(long n,uint flags);
extern void lfree(Line *lnp);
extern int linsert(int n,int c);
extern int linstr(char *s);
extern int lnewline(void);
extern int loadbind(void);
extern char *long_asc(long n,char *destp);
extern int lookup_color(char *strp);
extern int lcWord(Value *rp,int n);
extern int ltos(Value *destp,int val);
extern int macarg(Value *rp,uint aflags);
extern int markBuf(Value *rp,int n);
extern void mcclear(void);
extern int mccompile(void);
extern int mcscan(int n,int direct,int ptpos);
extern void mkdeltas(void);
extern char *mklower(char *destp,char *srcp);
extern char *mkupper(char *destp,char *srcp);
#if 0
extern int mlcpy(int f,char *strp,size_t len,enum e_viz v);
#endif
extern int mlerase(int f);
extern int mlprintf(int f,char *fmt,...);
extern int mlputc(int c,enum e_viz v);
extern int mlputs(int f,char *s,enum e_viz v);
extern int mlputv(int f,Value *vp,enum e_viz v);
extern int mlrestore(void);
extern int mlyesno(char *promptp,bool *resultp);
extern int moveWindUp(Value *rp,int n);
extern int movecursor(int row,int col);
extern int narrowBuf(Value *rp,int n);
extern int newcol(int c,int col);
extern int newlineI(Value *rp,int n);
extern void newpat(int len);
extern int newScreen(Value *rp,int n);
extern KeyDesc *nextbind(bool init);
extern int nextScreen(Value *rp,int n);
extern int nextWind(Value *rp,int n);
extern char *nilcpy(char *destp);
extern void nodeinit(ENode *np,Value *rp);
extern char *nonwhite(char *s);
extern int notice(Value *rp,int n);
extern int onlyWind(Value *rp,int n);
extern int openLine(Value *rp,int n);
extern int otherfence(Region *regp);
extern int outdentRegion(Value *rp,int n);
extern int overprep(int n);
extern char *pad(char *s,int len);
extern int parsebegin(Parse *newp,char *clp,int termch);
extern void parseend(Parse *oldp);
extern int parsetok(Value *destp,char **srcpp,int delim);
extern int pathsearch(char **rpp,char *namep,bool hflag);
extern int pipeBuf(Value *rp,int n);
extern int pnbuffer(Value *rp,int n,bool prev);
extern void ppfree(Buffer *bufp);
extern int prevWind(Value *rp,int n);
extern int putline(int row,int col,char *buf);
extern int quit(Value *rp,int n);
extern int quote(StrList *destp,char *srcp,bool full);
extern int quoteChar(Value *rp,int n);
extern int rcclear(void);
extern int rcsave(void);
extern int rcset(int status,uint flags,char *fmt,...);
extern int rdfile(Value *rp,int n,char *fname,bool scratch);
extern int readBuf(Value *rp,int n);
extern int readPipe(Value *rp,int n);
extern int readin(Buffer *bufp,char *fname,bool keep);
extern int readpattern(char *promptp,int srch);
extern char *regcpy(char *buf,Region *regp);
extern int reglines(int *np,bool *allp);
extern int render(Value *rp,int n,Buffer *bufp,uint flags);
extern int replstr(Value *rp,int n);
extern int resetTermc(Value *rp,int n);
extern int resizeWind(Value *rp,int n);
extern int restorecursor(void);
extern void rmcclear(void);
extern int rparsetok(Value *destp,char **srcpp,char *basep,int delim);
extern int run(Value *rp,int n);
extern int savebufs(int n,bool showcount);
extern void savecursor(void);
extern int scan(int n,int direct,int ptpos);
extern int scratchBuf(Value *rp,int n);
extern int scrcount(void);
extern int searchBack(Value *rp,int n);
extern int searchForw(Value *rp,int n);
extern int selectBuf(Value *rp,int n);
extern int setBufFile(Value *rp,int n);
extern int setBufName(Value *rp,int n);
extern int setMark(Value *rp,int n);
extern int setccol(int pos);
extern int setfname(Buffer *bufp,char *fname);
extern int seti(Value *rp,int n);
extern int setpath(char *path,bool prepend);
extern int settab(int size,bool hard);
extern void settermsize(ushort ncol,ushort nrow);
extern int setvar(Value *rp,int n);
extern int sfind(ushort scr_num,Buffer *scr_buf,EScreen **spp);
extern int shellCLI(Value *rp,int n);
extern int shellCmd(Value *rp,int n);
extern int showBindings(Value *rp,int n);
extern int showBuffers(Value *rp,int n);
extern int showFunctions(Value *rp,int n);
extern int showKey(Value *rp,int n);
extern int showKillRing(Value *rp,int n);
#if MMDEBUG & DEBUG_SHOWRE
extern int showRegExp(Value *rp,int n);
#endif
extern int showScreens(Value *rp,int n);
extern int showVariables(Value *rp,int n);
#if COLOR
extern int spal(char *pstr);
#endif
extern int spanwhite(bool end);
extern int splitWind(Value *rp,int n);
extern int sswitch(EScreen *scrp);
extern int stoec(char *keylitp,int *resultp);
extern int strexpand(StrList *slp,Value *vp);
extern int strfmt(Value *rp,int n,Value *formatp,Value *arg1p);
extern char *stripstr(char *srcp,int op);
extern char *strrev(char *s);
extern char *strsamp(char *srcp,size_t srclen,size_t maxlen);
extern bool strval(Value *vp);
extern int suspendEMacs(Value *rp,int n);
extern int swapMark(Value *rp,int n);
extern int sysbuf(char *rootp,Buffer **bufpp);
extern int tabstop(int n);
extern int termarg(Value *rp,char *promptp,char *defvalp,int terminator,uint aflags);
extern char *timeset(void);
extern int tcWord(Value *rp,int n);
extern int toint(Value *vp);
extern int tostr(Value *vp);
extern int traverseLine(Value *rp,int n);
extern int trimLine(Value *rp,int n);
extern void tungetc(int c);
extern int typahead(int *countp);
extern int unbindKey(Value *rp,int n);
extern void unbindent(KeyDesc *kdp);
extern int update(bool force);
extern void uphard(void);
extern void upmode(Buffer *bufp);
extern int ucWord(Value *rp,int n);
extern UVar *uvarfind(char *namep);
extern bool vistfn(Value *vp,int tfn);
extern bool vistrue(Value *vp);
extern int vnilmm(Value *vp);
extern int vrcset(void);
extern int vtinit(void);
extern int vttidy(bool force);
extern int whence(Value *rp,int n);
#if 0
extern char *white(char *s);
#endif
extern int widenBuf(Value *rp,int n);
extern int wincount(void);
extern EWindow *wnextis(EWindow *winp);
extern int wrapLine(Value *rp,int n);
extern int wrapWord(Value *rp,int n);
extern int writeBuf(Value *rp,int n);
extern int writeout(Buffer *bufp,char *fn,int mode);
extern int wscroll(Value *rp,int n,int (*winfunc)(Value *rp,int n),int (*pagefunc)(Value *rp,int n));
extern void wswitch(EWindow *winp);
extern void wupd_modeline(EWindow *winp,Buffer *popbuf);
extern bool wupd_newtop(EWindow *winp,Line *lnp,int n);
extern int xeqBuf(Value *rp,int n);
extern int xeqFile(Value *rp,int n);
extern int xeqKeyMacro(Value *rp,int n);
extern int yankPop(Value *rp,int n);
