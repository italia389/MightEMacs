~bExpressions and Aliases~B

MightEMacs expressions are very similar to those used in the C language.  All
operators and their associativity are listed in the following table in order of
precedence, highest to lowest.

~bPrecedence~B  ~bOperator~B  ~bDescription~B                                  ~bAssociativity~B
================================================================================
            ++        Suffix increment                             Left-to-right
            --        Suffix decrement
1           ()        Function call
          whitespace  Function call
            []        Array subscripting
--------------------------------------------------------------------------------
            ++        Prefix increment                             Right-to-left
            --        Prefix decrement
            +         Unary plus
2           -         Unary minus
            !         Logical NOT
            ~~         Bitwise NOT (one's complement)
--------------------------------------------------------------------------------
            *         Multiplication (if first operand is          Left-to-right
                       integer)
3           /         Division
            %         Modulo (if first operand is integer)
--------------------------------------------------------------------------------
4           +         Addition                                     Left-to-right
            -         Subtraction (if first operand is integer)
--------------------------------------------------------------------------------
5           =>        Numeric prefix (n)                           Left-to-right
--------------------------------------------------------------------------------
6           <<        Bitwise left shift                           Left-to-right
            >>        Bitwise right shift
--------------------------------------------------------------------------------
7           &         Bitwise AND (if first operand is integer)    Left-to-right
--------------------------------------------------------------------------------
8           |         Bitwise OR (inclusive or; if first operand   Left-to-right
                       is integer)
            ^         Bitwise XOR (exclusive or)
--------------------------------------------------------------------------------
9           %         String formatting (if first operand is       Left-to-right
                       string)
--------------------------------------------------------------------------------
10          *         Intersection (if first operand is array)     Left-to-right
            -         Exclusion (if first operand is array)
--------------------------------------------------------------------------------
11          |         Union (if first operand is array)            Left-to-right
--------------------------------------------------------------------------------
12          &         Concatenation (if first operand is string)   Left-to-right
--------------------------------------------------------------------------------
            <         Less than                                    Left-to-right
13          <=        Less than or equal to
            >         Greater than
            >=        Greater than or equal to
--------------------------------------------------------------------------------
            <=>       Comparison                                   Left-to-right
            ==        Equal to
14          !=        Not equal to
            =~~        RE equal to
            !~~        RE not equal to
--------------------------------------------------------------------------------
15          &&        Logical AND                                  Left-to-right
--------------------------------------------------------------------------------
16          ||        Logical OR                                   Left-to-right
--------------------------------------------------------------------------------
17          ?:        Ternary conditional                          Right-to-left
--------------------------------------------------------------------------------
            =         Direct assignment                            Right-to-left
            +=        Assignment by sum
            -=        Assignment by difference (or exclusion
                       if first operand is array)
            *=        Assignment by product (or intersection
                       if first operand is array)
            /=        Assignment by quotient
18          %=        Assignment by remainder
            <<=       Assignment by bitwise left shift
            >>=       Assignment by bitwise right shift
            &=        Assignment by bitwise AND (or concatenation
                       if first operand is array)
            |=        Assignment by bitwise OR (or union if
                       first operand is array)
            ^=        Assignment by bitwise XOR
--------------------------------------------------------------------------------
19          not       Logical NOT (low precedence)                 Right-to-left
--------------------------------------------------------------------------------
20          or        Logical OR (low precedence)                  Left-to-right
            and       Logical AND (low precedence)
--------------------------------------------------------------------------------

Multiple expressions can be separated by a semicolon on the same line.  Here are
some examples:

    print('Result is ', result)         # Function call using parentheses.
    print 'Result is ', result          # Function call using white space.

    # Insert at point: i times 2, a period, and a menu item without moving
    # point, and increment i.
    0 => insert '%2d' % 2 * i++, '. ', menuItem

    # Insert a title centered in current terminal width.
    insert sprintf('%*s%s', ($TermSize[0] - length(title)) / 2, '', title)

    # Get a pathname from current line (from point to end of line), save it in
    # "path" variable, and open the file in another window.
    2 => findFile(path = subline 0)

    # Append a string containing interpolated variable "y" to current line,
    # then display a message.
    $lineText &= ", y = #{y}"; print 'Line changed'

    # Get filename from user with non-auto-completion option.  If nothing is
    # entered, return to caller.
    if empty?(filename = prompt('File', 'NoAuto, Type: File'))
        return
    endif

    # Strip '.sh' extension from a filename, if present.
    substr(filename, -3) == '.sh' and filename = substr(filename, 0, -3)

Note that parentheses may generally be omitted in function calls as long as the
name is followed by white space; however, they may be required in certain
instances to avoid ambiguity.  The word "function" in the table includes
commands and aliases.

It is also possible to create an alias of a command or function with the ~balias~B
(~#uC-c C-a~U) command.  An alias of a command has the same functionality as its
counterpart, except that it cannot be bound to a key.  An alias of a function
can only be used in a script or ~beval~B command line.

An alias can be deleted with the ~bdelAlias~B (~#uC-c C-a~U) command.

Lastly, an expression can be built in a script (as a string) and executed with
the ~beval~B (~#uESC C-x~U) command.  For example, consider the following MScript code
fragment:

    prefix = ($0 == defn) ? 'search' : 'replace'
    pat = prompt "#{titleCaseStr prefix} pattern"
    eval '$', prefix, "Pat = '", pat, "'"

The user is prompted for a search or replacement pattern according to the n
argument ($0) and the corresponding system variable ($searchPat or $replacePat)
is set to the result
