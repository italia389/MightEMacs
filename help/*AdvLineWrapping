~bLine Wrapping~B

MightEMacs provides the ability to wrap text, either automatically as you type,
or all at once by specifying a block of lines to operate on and invoking one of
the "wrap" commands.

Automatic line wrapping is done when the "Wrap" buffer mode is enabled, the
"ReadOnly" buffer attribute is not set, a space or ~ureturn~U is entered (or more
precisely, the ~bspace~B or ~bnewline~B command is executed), and the point is at or
past the wrap column.  A wrap column exists for every screen and is managed with
the $wrapCol system variable.  You can set its value directly with the ~blet~B
(~#uESC =~U) command or use the ~bsetWrapCol~B (~#uESC w~U) command, which exists just for
this purpose.  ~bsetWrapCol~B prompts for a value, then sets $wrapCol to the number
that is entered.  It also remembers the previous wrap column and will use that
instead if a non-negative numeric prefix is specified (without prompting).
Hence, you can set two values in succession, then toggle back and forth between
them by typing ~#uC-u ESC w~U.  You can also display the current and previous wrap
columns on the message line by specifying a negative numeric prefix: ~#uC-- ESC w~U.

Automatic line wrapping is done via the "wrap" hook.  By default, the ~bwrapWord~B
function is used as the "wrap" hook and has no key binding.  This function is
designed specifically for word wrapping.  The ~bwrapWord~B function moves the word
at or just before the point to a new line if possible, and deletes any white
space that preceded it.  However, if no space character is found preceding the
word, it moves the point to the end of the current word and starts a new line.
This behavior can be modified somewhat by specifying a numeric prefix to the
function, which it uses as the left margin column instead of zero (the default).
In this case, it will only wrap words that are wholly at or beyond the left
margin.

The ~bwrapWord~B function is intended to only be used indirectly, either by
setting the wrap column and enabling the "Wrap" buffer mode as mentioned
previously, or by executing the ~bwrapLine~B (~#uESC RTN~U) command which rewraps a
block of lines.  The latter command, which is the second method for wrapping
text, is in the "line" family and uses the numeric prefix accordingly to
identify a block of one or more lines to operate on.  When invoked, it saves any
indentation (white space) from the first line of the block, calls ~bjoinLines~B
(~#uESC C-j~U) to convert the block to a single line by changing all embedded line
breaks and surrounding white space to a single space, then rewraps the single
line thus created at the wrap column repeatedly, inserting the indentation
before each new line, until the remainder is too short to wrap any further.  The
command calls the ~bwrapWord~B function with a numeric prefix equal to the
end-of-indentation column to achieve this.

Additionally, two options are available for line wrapping when these commands
are called from a script.  ~bjoinLines~B takes a ~unil~U or string argument, the
latter of which is a list of characters to be considered the "end of a
sentence".  When the command joins two lines, it will insert an extra space if
the first line ends with one of the specified characters and the second line is
not blank or all white space.  The value of the string argument is typically
".?!"; however, it can also be a null string to prevent this "extra space"
behavior.  If the argument is ~unil~U instead, the command will join lines with no
space between them.

The second available option is for the ~bwrapLine~B command, which takes two
arguments: a "line prefix", and an end-of-sentence string to pass to
~bjoinLines~B.  The line prefix is a string that will be inserted after any
indentation in each line that is created during the wrapping process; for
example, "# " or "// " to specify a comment in various programming languages.
Existing prefix strings (with or without trailing white space) are also
recognized and removed from each line of the block before ~bjoinLines~B is called.

As you can see, line wrapping in MightEMacs is fairly sophisticated and several
options are available.  However, it can be easily customized by taking the
following steps:

     1. Edit the "site.ms" startup file:

             a. Set the $CommentList array to all of the possible comment
                prefixes you will use in all programming languages you want to
                code in.  For example, if you routinely code in the shell,
                Python, and JavaScript, you can use the default value:

                    $CommentList = ['#', '//']

                If you code in Assembly also, you can add a semicolon:

                    $CommentList = ['#', '//', ';']

                Note that these must be "whole line" prefixes.  /* ... */
                comments are not supported.

             b. Set the $EndSentence variable.  If you want two spaces between
                sentences:

                    $EndSentence = '.?!'

                which is the default value.  If you want one space between
                sentences:

                    $EndSentence = ''

             c. Set the wrap column.  If you want a block of lines to extend all
                the way to the right edge of the screen after wrapping, use the
                default setting:

                    setWrapCol $TermSize[0]

                If you want a right margin instead (say, four spaces), use:

                    setWrapCol $TermSize[0] - 4

             d. Uncomment the following line, which will load the text-
                formatting routines:

                    require 'blockFormat'

             e. Save your changes: ~#uC-x C-s~U.

        Alternatively, you can put the following lines (using the defaults in
        this example) in your user startup file, ~/.memacs:

            $CommentList = ['#', '//']
            $EndSentence = '.?!'
            setWrapCol $TermSize[0]
            require 'blockFormat'

     2. Quit MightEMacs.

Now your customizations will be set automatically every time you start
MightEMacs.  From this point forward, you will be able to do either of the
following in an editing session:

     1. Rewrap a block of lines with or without leading white space.
     2. Rewrap a comment block (or a single line) that contains leading comment
        prefixes.

To rewrap a block of lines, you would do the following:

     1. Move point to the beginning or end of the line block.
     2. Execute the ~bwpWrapLine~B (~#uC-c RTN~U) command on the block using a numeric
        prefix to select the lines.

For example, if the point was at the beginning of a three-line block:

    ~#uC-u 3 C-c RTN~U

To wrap the current line plus the previous two:

    ~#uC-- C-- C-c RTN~U

Remember that the indentation of the first line of the block will be applied to
all subsequent lines.  For example, if your screen looked like this:

     ~u                                                                     ~U
    | The quick brown fox jumped over the lazy dog,                       |
    |    and the cow                                                      |
    | ran away with the spoon.  Or perhaps it was the                     |
    |  fork?~u ~U                                                             |
    |                                                                     |
    |                                                                     |
    |                                                                     |
    |                                                                     |
    |                                                                     |
    |                                                                     |
    |~r=* (Exact) == unnamed ============================= MightEMacs 9.7.0 ~R|

with the point following the word "fork?", and you typed ~#uC-- 3 C-c RTN~U, the
four-line block would be converted to this (assuming $wrapCol is set to the
terminal width):

     ~u                                                                     ~U
    | The quick brown fox jumped over the lazy dog, and the cow ran away  |
    | with the spoon.  Or perhaps it was the fork?                        |
    | ~u ~U                                                                   |
    |                                                                     |
    |                                                                     |
    |                                                                     |
    |                                                                     |
    |                                                                     |
    |                                                                     |
    |                                                                     |
    |~r=* (Exact) == unnamed ============================= MightEMacs 9.7.0 ~R|

with the point left at the end of the block.

You can also do this with comment blocks.  To rewrap a line block that contains
leading comment prefixes:

     1. Move point to any line in the block.
     2. Execute the ~bbfFormatItem~B (~#uESC .~U) command.

For example, if the buffer contained the following lines:
     ~u                                                                     ~U
    |     # The quick brown fox jumped over                               |
    |  # the lazy dog,                                                    |
    | # and the cow ran away~u ~U with the spoon.                             |
    | #    Or perhaps it was the fork?                                    |
    |                                                                     |
    | This line is not a comment.                                         |
    |                                                                     |
    |                                                                     |
    |                                                                     |
    |                                                                     |
    |~r=* (Exact) == myscript ============================ MightEMacs 9.7.0 ~R|

with the point in the middle of the third line (after "away"), and you entered
~#uESC .~U, the first four lines would be converted to:
     ~u                                                                     ~U
    |     # The quick brown fox jumped over the lazy dog, and the cow ran |
    |     # away with the spoon.  Or perhaps it was the fork?             |
    | ~u ~U                                                                   |
    | This line is not a comment.                                         |
    |                                                                     |
    |                                                                     |
    |                                                                     |
    |                                                                     |
    |                                                                     |
    |                                                                     |
    |~r=* (Exact) == myscript ============================ MightEMacs 9.7.0 ~R|

with the point left at the end of the comment block.  Notice that the first line
determines the indentation for the whole block.
