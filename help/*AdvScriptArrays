~bArrays~B

There are several operators and functions for creating and manipulating arrays.
Arrays are defined by enclosing zero or more comma-separated values within
brackets ~#u[ ]~U.  Array elements are accessed using an integer index in brackets
immediately following the array expression with no intervening white space.  It
is also possible to create an array "slice" by using two integers which specify
an offset and length.  For example:

    x = ['blue', true, [$bufname, 0], env 'HOME']

    y = x[0]                # y is the string "blue".
    z = x[2]                # z is the array [$bufname, 0].
    new = x[0, 2]           # new is the array ["blue", true].

The slice length may be greater than the number of elements past the offset, in
which case all elements beginning at the offset through the end of the array are
selected.  For example, [1, 2, 3, 4, 5][2, 99] evaluates to [3, 4, 5].

Arrays may also be created by using the ~barray~B function or a function that
returns a new array as a result of its operation; for example, ~baclone~B, ~bacompact~B,
or ~bsplit~B (among others).  Additionally, the ~u&~U, ~u|~U, ~u*~U, and ~u-~U operators (which
perform concatenation, set union, set intersection, and set exclusion,
respectively) return a new array when both of their operands are arrays.  For
example:

    a1 = [1, nil, 2, nil]
    a2 = acompact(a1)       # a2 is the new array [1, 2].
    a3 = a2 | a1            # a3 is the new array [1, 2, nil].

Arrays may be "auto extended" by assigning a value to an element beyond the end
of the array.  The intervening elements if any, are set to ~unil~U.  For example,
the sequence:

    x = [1, 2]
    x[4] = false

would set local variable "x" to [1, 2, nil, nil, false].

Arrays may be compared with the ~u==~U or ~u!=~U operators, and may be specified as the
second argument to the ~bainclude?~B function, such as:

   ainclude? [1, [2, 3], 4], [2, 3]

which would return ~utrue~U.

Lastly, the operators ~u&=~U, ~u&|~U, ~u&*~U, and ~u&-~U perform the same operations as the ~u&~U,
~u|~U, ~u*~U, and ~u-~U operators mentioned previously, except that the left-hand array is
modified in place.

Arrays may also be concatenated with other values via the ~u&~U or ~u&=~U operators.  If
the first argument of the expression is string, all following arguments will be
converted to string, including arrays, and the result will be string.  However,
arrays will be processed recursively as if each element was specified
separately.  If the first argument of the concatenation expression is an array,
the result will be a new array containing a clone of the first array plus all
following arguments appended to it as separate elements.  Any array argument
will be "exploded" into separate arguments first.  Following are some examples:

    a1 = ['Blue', nil, 4]
    a2 = [4, 3, 4, 5]
    a2 &= a1                        # a2 is [4, 3, 4, 5, 'Blue', nil, 4].
    a2 *= a1                        # a2 is [4, 'Blue', nil].
    a2 |= [['Green', false], 4]     # a2 is [4, 'Blue', nil, ['Green', false]]
    a1 -= [0, nil, 4]               # a1 is ['Blue'].
