~bSearch Pattern Syntax~0

As discussed previously, there is a group of commands for searching for a
pattern in a buffer and optionally, replacing one or more occurrences of the
matching text with a string or another pattern.  MightEMacs supports searching
using regular expressions (REs) or plain text patterns.  Additionally, either
type of search can be case-sensitive or case-insensitive, and searching can be
done either forward or backward.  The type of pattern matching is controlled by
option characters appended to the pattern string, and by two global modes:
"Exact" and "Regexp".  When enabled, the former mode specifies case-sensitive
pattern matching by default and the latter specifies RE matching by default.
Either or both can be enabled or disabled at any time.

The following regular expression pattern-matching metacharacters are supported:

    ~b^~0       Match beginning of line (including the position following a ~unewline~U
            character) or negate a character class.
    ~b$~0       Match end of line (including the position preceding a ~unewline~U
            character).
    ~b.~0       Match any character except ~unewline~U.
    ~b*~0       Match zero or more occurrences of the previous character or
            character class in "as many as possible" mode.
    ~b+~0       Match one or more occurrences of the previous character or character
            class in "as many as possible" mode.
    ~b?~0       Match zero or one occurrence of the previous character or character
            class, or specify closure modification.
    ~b{m,n}~0   Match a minimum of ~bm~0 and a maximum of ~bn~0 occurrences of the previous
            character or character class, where ~bm~0 and ~bn~0 are unsigned integers.
            ~bm~0 is required; however, ~bn~0 or ~b,~0 may be omitted.  In the ~b{m,}~0 form, ~bn~0
            defaults to an infinite value.  In the ~b{m}~0 form, exactly ~bm~0
            occurrences must match.
    ~b[~0       Begin a character class definition.
    ~b]~0       End a character class definition.
    ~b(~0       Mark the beginning of a group.
    ~b)~0       Mark the end a group.

The ~b?~0 character is used for "zero or one of the previous item" or as a modifier
following itself, ~b*~0, ~b+~0, or ~b{m,n}~0 meaning "as few as possible".

Whitespace characters and some control characters may be specified with the ~b\x~0
notation:

    ~b\t~0      Tab character.
    ~b\r~0      Carriage return.
    ~b\n~0      Newline.
    ~b\f~0      Form feed.
    ~b\s~0      All of the above plus the space character (a character class).

Special anchor and positional metacharacteers may be specified with the ~b\x~0
notation also:

    ~b\A~0      Match beginning of string.
    ~b\z~0      Match end of string.
    ~b\Z~0      Match end of string, but just before any trailing ~unewline~U character
            if present.
    ~b\b~0      Match a word boundary, as defined by the value of the $wordChars
            global variable.
    ~b\B~0      Match a non-word boundary, as defined by the value of the $wordChars
            global variable.

Character classes ~b[]~0 may contain range(s) or be negated with a leading ~b^~0
metacharacter; for example, "[a-zA-Z0-9_]" or "[^0-9]".  A few common character
classes may be specified with the ~b\x~0 notation as well:

    ~b\d~0      [0-9]           Digit.
    ~b\D~0      [^0-9]          Non-digit.
    ~b\l~0      [a-zA-Z]        Letter.
    ~b\L~0      [^a-zA-Z]       Non-letter.
    ~b\s~0      [ \t\r\n\f]     Whitespace character.
    ~b\S~0      [^ \t\r\n\f]    Non-whitespace character.
    ~b\w~0      [a-zA-Z0-9_]    Word character, as defined by the $wordChars
                            variable.
    ~b\W~0      [^a-zA-Z0-9_]   Non-word character, as defined by the $wordChars
                            variable.

Additionally, any of the ~b\t~0, ~b\r~0, ~b\n~0, or ~b\f~0 control characters and the ~b\d~0,
~b\l~0, ~b\s~0, or ~b\w~0 metacharacters may be specified inside a character class as
combinations, such as "[\l\d]" to specify any letter or digit.

Plain parentheses ~b(~0 and ~b)~0 are used for grouping and escaped versions ~b\(~0 and ~b\)~0
are used to search for the literal characters.  Grouped match strings may be
included in a replacement pattern by specifying ~b\n~0, where n is a digit in the
range 1-9 and refers to the nth group.  Groups are numbered in sequence by the
opening parenthesis in the search pattern, beginning at 1.  The entire matched
string is represented by ~b\0~0 or the ~b&~0 metacharacter.

Lastly, a colon and one or more lowercase letters may be appended to any pattern
to specify options, as follows:

    ~be~0       Exact pattern matching.  Case of letters is significant.
    ~bi~0       Ignore case.  Case of letters is not significant.
    ~bp~0       Plain text matching.  The pattern is matched literally.
    ~br~0       Regexp matching.  The pattern is matched as a regular expression.
    ~bm~0       Multi-line mode.  When performing RE matching, the ~b.~0 metacharacter
            and a negative character class ~b[^...]~0 will match a ~unewline~U, which
            they do not by default (but only if, in the latter case, the
            character class does not contain a ~unewline~U).

Pattern options always override the corresponding global modes.  For example,
the pattern "abc.:ri" would be processed as a regular expression and case would
be ignored, whether or not the ~uExact~U or ~uRegexp~U global modes were enabled.
Whereas "abc.:e" would cause case to be significant, but would be processed as a
regular expression if ~uRegexp~U mode was enabled, and as plain text if not.  Also,
to allow a pattern option string to be part of a pattern and avoid ambiguity
when a pattern is interpreted, the following rule is used:

    "If a pattern ends with a colon followed by one or more valid option
    letters, and the colon is not the first character of the pattern, then
    everything preceding the colon is the pattern.  In all other cases, the
    entire string is the pattern (with no options)."

So for example, the pattern "abc:ri" would be interpreted as RE pattern /abc/i,
"abc:r:p" would be interpreted as plain text pattern 'abc:r', "abc::r" would be
interpreted as RE pattern /abc:/, and "abc:rx" would be interpreted as plain
text pattern 'abc:rx' (because it contains invalid option letter ~bx~0).

The ~b|~0 metacharacter is not currently supported, and the closure metacharacters
~b*~0 ~b+~0 ~b?~0 may not be applied to a group.
