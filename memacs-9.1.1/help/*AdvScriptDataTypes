~bData Types~0

Several data types are supported in the scripting language:

    *   Variables and expressions are one of nil, Boolean, integer, string, or
        array type.  There is also a pseudo "char" type, implemented as an 8-bit
        integer.  With few exceptions, values are not automatically converted
        from one type to another when expressions are evaluated (like in the
        Perl language, for example).  However, you can use the ~utoInt~U function to
        convert a numeric string literal to an integer, and the ~utoStr~U function
        to convert any value to a string.  nil and Boolean types are coded using
        the keywords ~unil~U, ~utrue~U, and ~ufalse~U.  ~unil~U represents a "nothing" value and
        is different from a null string.  Additionally, the ~udefn~U keyword exists,
        which holds an integer value equal to the default n argument.

    *   Integers may be coded in any form which is permitted by the strtol()
        function of the Standard C Library where the base is zero.

    *   String literals are defined with single quotes (~u'~U) or double quotes (~u"~U).

    *   A single-quoted string may contain ~u\'~U or ~u\\~U to specify an apostrophe or
        backslash character.  All other characters are taken literally.

    *   A double-quoted string may contain ~u\"~U, ~u\\~U, ~u\x~U, ~u\num~U or ~u#{and-or-expr}~U to
        specify a double quote character, a backslash character, a special
        escaped character designated by the letter ~ux~U, an octal or hexadecimal
        value of a character, or an interpolated expression.

        The ~u\x~U escaped characters and their octal values are:

            ~u\r~U    015    Carriage return
            ~u\n~U    012    Newline
            ~u\s~U    040    Space
            ~u\t~U    011    Tab
            ~u\f~U    014    Form feed
            ~u\e~U    033    Escape

        To specify the octal or hexadecimal value of an ASCII character, use
        ~u\0nnn~U (zero to three digits after the zero) or ~u\0xnn~U (one or two
        hexadecimal digits after the "x", leading zero is optional).

        The result of an arbitrary expression may also be inserted into the
        string by using ~u#{and-or-expr}~U (like in the Ruby language), where
        ~uand-or-expr~U may itself contain a double-quoted string with an
        interpolated expression.  Nesting is allowed.

    *   A character literal is an 8-bit integer value defined with a question
        mark followed by a single character, which may be plain text or any
        escaped character allowed in a double quoted string; for example, ~u?x~U
        (the letter ~ux~U), ~u?\t~U (tab), or ~u?\s~U (space).

    *   ~u0~U, ~u?\0~U, ~ufalse~U, and ~unil~U are false; all other expressions and variable
        values are true, including null strings ~u''~U and ~u""~U.
