~bHooks~0

Certain operations during an editing session may be controlled or customized by
assigning the name of a macro to a "hook".  Operations include switching
buffers, reading or writing a file, and executing keys.  When a hook is
triggered, the macro associated with the hook is called with arguments, if
applicable (see below).  If an error occurs during execution or the macro
returns false, an error message is displayed and the hook is disabled.

Note that you cannot assign a command or function to a hook because it makes no
sense to do so.  The one exception is the "wrap" hook which is set indirectly to
the ~uwrapWord~U function via the ~uhkWrap~U macro by default (discussed in the ~bLine~0
~bWrapping~0 section).  The ~uwrapWord~U function is designed just for this purpose.

You also may not assign a macro to a hook unless the macro was defined with the
~uconstrain~U keyword, which designates it as a "helper" routine.  (Macro definitions
are explained in detail in the ~bStatements~0 section.)

A hook is set or cleared with the ~usetHook~U (~#uC-x h~U) command, usually in a script.
For example, this line from the "memacs.mm" startup file:

    setHook 'help',hkHelp

sets the "help" hook to the ~uhkHelp~U macro.  To clear a hook, set it to ~unil~U.
To see all hooks and their settings, enter ~#uC-h h~U (~ushowHooks~U).

The complete list of hooks follows:

    ~bHook name~0   ~bMacro arguments~0     ~bDescription~0

    chgDir       (none)             Change-directory hook -- called at program
                                    startup and after the ~uchgDir~U command is
                                    executed.

    createBuf   Buffer name         Create-buffer hook -- called at program
                                    startup and immediately after a buffer is
                                    created, with the exception of temporary
                                    buffers (for example, help buffers, which
                                    are created and displayed in pop-up windows,
                                    then deleted).

    exitBuf     (none)              Exit-buffer hook -- called just before
                                    leaving a buffer.  $bufName is the name of
                                    the buffer being exited.  The macro's return
                                    value is passed to the enter-buffer hook.

    enterBuf    exitBuf return      Enter-buffer hook -- called after switching
                 value              to another buffer.  $bufName is the name of
                                    the buffer being entered.

    filename    Buffer name,        Filename-change hook -- called whenever a
                 filename           filename is changed in a buffer.  The second
                                    (filename) argument will be ~unil~U if the
                                    buffer's filename is not set.

    help        (none)              Help hook -- called when the ~uhelp~U command
                                    is executed.

    mode        nil, $GlobalModes   Mode-change hook -- called whenever any mode
                 ~uOR~U buffer name,    is changed.  If global mode(s) are changed,
                 $BufModes          arguments are nil and the prior $GlobalModes
                                    value.  If buffer mode(s) are changed,
                                    arguments are the buffer name and the prior
                                    $BufModes value.  (The value of the variable
                                    can be compared to the current value of the
                                    same variable to find the mode(s) that
                                    changed.)

    preKey      (none)              Pre-key hook -- called after a key sequence
                                    is entered, but before it is executed.  The
                                    sequence that was entered is available in
                                    the $lastKeySeq variable (in string form).
                                    If it was a single 7-bit ASCII character, it
                                    is also available in the $LastKey variable
                                    in integer form (which is intended to be
                                    used by scripts that do programming language
                                    formatting).  The hook macro may set a new
                                    key to be executed by assigning one to the
                                    $lastKeySeq variable.

    postKey     preKey return       Post-key hook -- called immediately after a
                 value              key sequence is executed.  The argument is
                                    the return value from the pre-key hook,
                                    which is nil by default.  $lastKeySeq will
                                    contain the key sequence that was actually
                                    executed; that is, the original one entered
                                    by the user, or the one assigned to the
                                    variable by the pre-key hook, if applicable.

    read        Buffer name,        Read-file hook -- called after a file is
                 filename           read into a buffer.  The second (filename)
                                    argument will be ~unil~U if standard input was
                                    read.

    write       Buffer name,        Write-file hook -- called just before a
                 filename           buffer is written to disk.

    wrap        (none)              Wrap-word hook -- called when the "Wrap"
                                    buffer mode is enabled, the "RdOnly" buffer
                                    mode is disabled, a space or ~ureturn~U was
                                    entered, and the point is at or past the
                                    wrap column ($wrapCol).
