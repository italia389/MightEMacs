8.5.1	23 Feb 2017
 1. Fixed bug where specifying a string containing a printf formatting spec
    (like "%s") as an argument to the "abort" or "exit" command or "notice"
    function in a script would cause unpredictable results, including a crash.
 2. Changed search commands to display a message when a search is "taking
    awhile" to complete (which can happen in very large buffers) so the user
    knows the search is in progress.
 3. Fixed problem where the "queryRepl" command was not always terminating if
    n > 0 and n substitutions were made because the number of matches was being
    checked instead of the number of substitutions.
 4. Fixed problem where a window was not being redrawn when "HScrl" mode was
    enabled, the display was shifted left (because the point was near the end of
    a long line), and "HScrl" mode was subsequently disabled.

8.5.0	2 Feb 2017
 1. Converted GeekLib library to new ProLib library which contains several
    improvements, including Datum objects (which replace Value objects and now
    support several data types) and records and routines for managing arrays.
    Datum and Array objects are used extensively by MightEMacs.
 2. Enhanced supported data types:
	* Added array data type.
	* Changed nil and Boolean pseudo (string) types to real types.
    The scripting language now supports nil, Boolean, integer, string, and array
    data types.  Arrays may be nested, sliced, and "auto extended" by assigning
    a value to an element beyond the end of the array.  Array syntax is
    "[val,val,...]" where "val" is a value of any type, including array; for
    example, "x = [false,5,['abc',nil]]".  A slice is created by using two
    indices; for example, "y = x[0,2]" would set "y" to "[false,5]".
    Additionally, an array may be "auto extended" by assigning a value to an
    element beyond the end of the array; for example (continuing the previous
    one), the sequence "y[3] = 'xyz'" would set "y" to "[false,5,nil,'xyz']".
 3. Added a "for" statement (loop block) to the scripting language for iterating
    through elements of an array.  The new syntax is:
	for <var> in <array-expr>
		...
	endloop
 4. Changed macro syntax and argument processing:
	* Changed syntax for a macro definition to:
		macro <name>(<n>) {usage: <str>, desc: <str>}
	  which specifies that the (optional) argument count now be in
	  parentheses instead of preceded by a comma as previously, and adds
	  optional "usage" and "description" strings.
	* Changed showBindings display to include any usage text for macros.
	* Changed showKey command to display usage text on the message line in
	  addition to the command or macro name.
	* Replaced $ArgCount, $argIndex variables and "nextArg" function with
	  new $ArgVector array, which holds the arguments (if any) of a running
	  macro.
	* Changed numeric variables ($1, $2, ...) to reference $ArgVector array
	  elements.
	* Changed "length" function to accept an array argument and return its
	  size.
    Note that the $ArgVector variable may not be assigned to; however, the array
    it contains may be modified in any way, just like any other array.
 5. Implemented parallel assignment:
	* Added support for assignment expressions such as "a,b[1],c = [1,2,3]",
	  which will set multiple variables (or array elements) at once to the
	  elements of an array.
	* Removed support for comma expressions such as "(x = 3), y = nil" to
	  avoid syntactical ambiguities.
 6. Added array recursion detection:
	* Renamed $maxRecursion variable to $maxMacroDepth and created
	  $maxArrayDepth variable.
	* Changed certain array operations to either (a), return an error if
	  $maxArrayDepth is exceeded during recursive evaluation; or (b) stop if
	  endless recursion is detected and return "[...]" for the array.
	* Changed "quote" function to force the latter behavior if n > 0.
    These changes will prevent an endless loop if an array that contains itself
    at any nesting level is evaluated.
 7. Added support for line continuation in scripts: changed script processor to
    combine any line that ends with a backslash (\) with the following line(s)
    before evaluating it.  This allows any line (or multiple lines) in a script
    to be extended to the next line by adding a backslash to the end of it,
    including a line containing a partial single (') or double (") quoted
    string.
 8. Made several function changes:
	* Removed delimiter argument from include? function and changed to
	  require an array instead of a list.
	* Renamed push, pop, shift, unshift functions to strPush, strPop,
	  strShift, strUnshift and changed to not allow Boolean (or array)
	  arguments.
	* Created new push, pop, shift, and unshift functions which operate on
	  an array.
	* Changed "length" function to accept an array or string argument and
	  return its size or length.
	* Changed the concatenation operators (& and &=) and functions which
	  concatenate a list of arguments (like `print`), to also accept Boolean
	  values and arrays and process the latter (recursively) as if each
	  element was specified as an argument.
	* Changed "quote" function to accept any data type and convert it to a
	  string form which can be resolved via the "eval" function back to its
	  original value.
	* Changed "join" and "toString" functions to accept arrays and use the n
	  argument to control the conversion process.
	* Replaced $KillText variable with "kill N" function, which returns the
	  Nth kill.
	* Replaced int? and string? functions with type?, which returns the type
	  of its argument as a keyword ("nil", "bool", "int", "string", or
	  "array").
	* Changed "sprintf" function to accept an array at any position in the
	  argument list after the format spec and process the array elements as
	  if they were specified individually.
	* Created "split" function which converts a string to an array.
	* Created "array" function which creates an array with size and
	  initializer options.
	* Created "clone" function which creates an exact copy of an array.
	* Replaced void? function with empty?, which returns true if its
	  argument is nil, a null string, or an empty array.
	* Changed "sprintf" function and '%' operator to allow a nil argument
	  for the %s specification in the format string.
    Note that for compatibility with array elements, which can be assigned to
    but are not variables, the functionality of the strShift and strPop
    functions has changed slightly: a null item at the beginning (for strPop) or
    end (for strShift) of a delimited string in a variable or array element will
    not be detected, and nil will be returned instead of a null string as
    before.  The old behavior can be mimicked however, simply by "doubling up"
    the delimiter at the end of the string.  For example, use "a:bb::" in place
    of "a:bb:" to get a null string as the third argument for strShift instead
    of nil.
 9. Changed "rand" function:
	* Added "max N" required argument to function;
	* Changed to return integers in range 1..N.
	* replaced internal algorithm with a "xor-shift-64" type which uses
	  64-bit unsigned integers.
	* Changed $randNumSeed assignment so that (a), any value other than zero
	  is used verbatim; and (b), a zero value causes a new seed to be
	  obtained using the current time.
10. Made command changes:
	* Changed default key binding for "inserti" command to "C-c i" and
	  replaced deleteTab command with deleteBackTab (S-TAB) and
	  deleteForwTab (M-TAB), which simplifies the task of deleting tabs
	  forward when using soft tabs.
	* Changed "beep" command to a function.
	* Changed nextBuf and prevBuf commands to return buffer name only if n
	  == 0, and delete exited buffer after switching to new buffer if n < 0.
	* Changed resizeWind to make all windows on screen the same size if
	  n == 0.
	* Changed deleteWind to force space to upper window if n < -1 (instead
	  of n < 0) and added option to delete its buffer if n == -1 (for
	  consistency with prevBuf and nextBuf commands).
	* Created "lastBuf" command (bound to "C-x \"), which (a), switches to,
	  in the current window, the last buffer that was exited from in any
	  window; and (b), deletes the former buffer if n < 0.
    The "lastBuf" command provides a means to easily toggle between two buffers
    in a window, or view a file in the current window temporarily, then switch
    back to the previous buffer, deleting the new buffer in the process.
11. Changed "joinLines" command:
	* Fixed bug where all lines from dot to the end of the buffer would be
	  joined if n == 0 and the region contained only one line.
	* Changed processing to do nothing (instead of returning an error) if
	  n == 1 or the region line count is 1.
12. Made system variable changes:
	* Replaced $BufList and $WindList variables with "bufList" and
	  "windList" functions (which return arrays instead of delimited
	  strings) and added list options which can be selected via the n
	  argument.
	* Deleted $BufCount (which is synonymous with "length bufList()") and
	  $BufOtpDelim (which is not needed).
	* Replaced $BufLen and $BufSize variables with "bufSize" function which
	  returns the buffer size in lines or bytes, depending on the n
	  argument.
	* Replaced $EditorName, $EditorVersion, $Language, and $OS variables
	  with "sysInfo" function which returns a value selected by the n
	  argument.
	* Renamed $travJumpSize to $travJump (to be consistent with $horzJump
	  and $vertJump) and changed default value from 14 to 12.
	* Deleted $BufFlagPreprocd.
	* Eliminated legacy "truncated file" concept and corresponding buffer
	  flag ($BufFlagTruncated).
13. Changed concatenation:
	* A concatenation expression such as "nil & 5" where nil is the first
	  value is no longer allowed.
	* Any value may now be concatenated with a string, including Boolean and
	  array values.
	* Any value may be concatenated with an array; however, an array value
	  will be "exploded" first.
    These changes allow expressions such as "'Result: ' & myMac() & [': ',55]"
    (string result) and "[1,2] & [3,4,5]" (array result).
14. Changed auto-save feature:
	* Changed key entry loop to save all changed buffers instead of just the
	  current one when auto-save is triggered.
	* Changed mode control system to not allow "ASave" mode to be activated
	  if $autoSave is zero.
15. Changed hook system to no longer allow a command to be bound to a hook
    (which made no sense):
	* Changed wrapWord command to a function.
	* Created "wrapper" macro (in memacs.mm) which calls wrapWord, and set
	  it to the "wrap" hook.
16. Changed buffer completion to not display hidden buffers when TAB is entered
    as the first character, but include them if '?' is entered.
17. Made improvements to the C, MightEMacs, and Ruby toolbox libraries,
    including the ability to search for class and module names in Ruby files
    (via "C-c C-c") in addition to method names.
18. Changed default key binding for xeqFile command from "M-/" to "C-x /" to be
    consistent with other file commands and xeqBuf command (C-x x).
19. Streamlined command and function code so that execution is always done in
    one place and arguments are validated consistently.  These changes fixed
    bugs where specifying an unexpected integer argument to certain commands or
    functions caused a crash, including:
	* First argument to "joinLines" and "sprintf" functions.
	* First or second argument to "wrapLine" command.
	* Any argument to "deleteBuf" command.
20. Fixed issue where the "writeBuf" function would not always insert text in
    the correct place if the target buffer was being displayed.
21. Reorganized source header files: replaced the e*.h files with bind.h, cmd.h,
    english.h, exec.h, file.h, lang.h, main.h, search.h, std.h, and var.h.

8.4.0	23 Oct 2016
 1. Changed internal line delimiters from CR to NL:
	* Changed all terminal input to allow either "return" (C-m) or "newline"
	  (C-j) as a line delimiter if either one is specified as the delimiter,
	  and to convert "return" to "newline" by default otherwise.
	* Changed all buffer editing to create a line when a NL character is
	  inserted instead of a CR character.
	* Changed pattern matching to recognize NL as "end of line" instead of
	  CR.
 2. Changed expression evaluation so that a null string ('' or "") will evaluate
    to true instead of false when used in a Boolean context.  Now the only
    expressions that are false are 0, false, and nil.  All other expressions,
    including a null string, are true.
 3. Changed "replace" and "queryReplace" commands to interpret a "\0" literal in
    the replacement pattern in Regexp mode as a "group 0" (the entire match)
    reference instead of a "0" character.
 4. Changed "deleteBuf" command to:
	* Ignore changes when n < 0 instead of n > 0.
	* Delete all unchanged buffers if n == 0.
	* Delete all buffers, no force, if n == 1.
	* Delete all buffers, ignoring changes, if n > 1.
    The user is prompted for confirmation in the last case.
 5. Changed "white space" delimiter in list processing from nil to a space
    character:
	* Changed push and unshift functions to convert a nil delimiter to a
	  null string instead of a space when adding the delimiter and value to
	  a variable.
	* Changed pop and shift functions to process a nil delimiter the same
	  way as a null ("") delimiter.
	* Changed include?, pop, and shift functions to use a space character
	  for white space instead of nil.
 6. Changed default $execPath to ":/usr/lib/memacs" (Debian) and
    ":/usr/local/lib/memacs" (non-Debian) and changed installation process
    accordingly.
 7. Removed "echo" option from "getKey" function and changed it to get a single
    key and return it as an integer if n <= 0.
 8. Changed the "writeFile" and "appendFile" commands to update the buffer name
    by default when a new filename is set, but to skip the update if n <= 0.
 9. Eliminated if/loop nesting limit in scripts.  Nesting depth is now
    unlimited.
10. Changed processing of "about" command and all "showXXX" commands so that if
    the buffer that is created is not deleted after the command is executed (if
    n >= 0), the buffer is made visible.
11. Added case-insensitive search option to "grepFiles" (C-x C-g) macro.
12. Fixed bug in "showMarks" command where a mark set on an empty line was
    sometimes displaying random characters or incorrect data for the line's
    contents.
13. Previously, when the "$otpDelim" variable was not set and multiple buffers
    were written, the input record delimiter from the current buffer was being
    used as the output delimiter for all buffers instead of using each buffer's
    input delimiter.  This has been fixed.
14. Fixed bug where assignment to the $bufLineNum variable was returning an
    error.
15. Removed the "reverse" function, which had dubious value.

8.3.1	18 Sep 2016
 1. Bug fixes:
	* Fixed bug where it was not possible to specify an explicit RegExp
	  pattern that ended with a colon due to a syntax issue related to
	  consecutive colons.  For example, the pattern "abc:::r" was
	  interpreted as the plain text pattern 'abc::r' instead of RegExp
	  pattern /abc:/.  Changed method of interpreting patterns as follows:
	  "If a pattern ends with a colon followed by one or more valid option
	  letters, and the colon is not the first character of the pattern, then
	  everything preceding the colon is the pattern.  In all other cases,
	  the entire string is the pattern (with no options)."  Now for example,
	  "abc:ri" would be interpreted as RegExp pattern /abc/i, "abc:r:p"
	  would be interpreted as plain text pattern 'abc:r', and "abc::r" would
	  be interpreted as RegExp pattern /abc:/.
	* Fixed bug in "include?" function where it was returning false when the
	  element being searched for was in the list but also occurred earlier
	  in the list as a substring of a different element.
	* Fixed bug in "sub" function where it would return an incorrect result
	  in certain circumstances when called with a RegExp pattern and n > 1.
	* Fixed the "renameFile" (C-x r) macro and "help" (ESC ?) command by
	  changing all occurrences of the obsolete "fileExists?" function in
	  memacs.mm to equivalent "stat?" calls.
	* Fixed issues in the keyboard macro toolbox (keyMacro.mm) where saving
	  a macro (C-c C-s) produced an error and displaying a list (C-c y) did
	  nothing.
 2. Renamed $search and $replace system variables to $searchPat and $replacePat,
    which better describe their purpose.
 3. Renamed $WorkDir system variable to $workDir and changed its usage so that
    the current working directory can be changed by assigning a value to it.
 4. Replaced "Rd1st" global mode with -N switch.
 5. Changed default bindings for grepFiles macro from "M-s" to "C-x C-g",
    cFindFunc, memacsFindMacro, and rubyFindMethod macros from "M-C-]" to
    "C-c C-f", and newScreen command from "M-C-s" to "M-s", which puts the first
    in the "file family" (most of which begin with "C-x") and makes the latter
    ones easier to enter and/or remember.
 6. Added option to "renameFile" (C-x r) macro to rename file on disk only if
    n <= 0.
 7. Changed fenceWord macro to accept any punctuation character as a fence (in
    addition to (), [], {}, and <> pairs) and use it for both the left and right
    fence characters.

8.3.0	18 Jun 2016
 1. For Debian Linux: changed default value of $execPath global variable to
    ":/etc/memacs.d:/etc" in memacs binary, and changed installation process to
    install package files in /etc and /usr/bin instead of /usr/local.
 2. Made regular expression changes:
	* Added support for "{m,n}" repetition operators, "\b" (word boundary),
	  and "\B" (non-word boundary) metacharacters.
	* Changed RE compilation to return an error if a repetition operator
	  (such as + or *) is specified in an invalid location, instead of
	  treating the operator as a literal character, as was done previously.
 3. Made mode changes:
	* Replaced single-letter shortcuts for mode names with name completion.
	  Partial mode names which are unambiguous (such as "rd" for "RdOnly")
	  are also allowed.
	* Created "showModes" command bound to "C-h o", and removed cryptic mode
	  information from "showBuffers" display.
 4. Changed "insertLineI" command to use its numeric prefix to determine a
    target line and insert a single line with indentation before that line
    instead of inserting n lines before or after the current line, as was done
    previously.

8.2.1	22 Apr 2016
 1. Bug fixes:
	* Fixed bug where all integer global variables were being converted to
	  strings after the "showVariables" command was executed.
	* Fixed bug where the "setBufFile" command was returning an error
	  message when RETURN was entered at the filename prompt instead of
	  clearing the filename.
	* Fixed bug where all marks were cleared in a narrowed buffer when the
	  "clearBuf" command was executed, instead of just the visible ones.
 2. Renamed the "fileExists?" function to "stat?" and changed to accept a second
    argument containing letter(s) which mimic the shell's -x file tests.  The
    function now returns true if any of the following test codes are true for
    the given file: [d]ir, [e]xists, [f]ile, sym[L]ink, hard[l]ink, [r]ead,
    [s]ize > 0, [w]rite, or [x]eq; otherwise, it returns false.
 3. Changed the "pathname" function to not resolve a symbolic link and return
    the abolute pathname of the link itself if n <= 0.
 4. Added calls to the exit-buffer and enter-buffer hooks if the buffer changes
    when switching screens.
 5. Added new macros to the memacs.mm startup file:
	* "renameFile" (bound to 'C-x r'), which renames the file associated
	  with the current buffer, both in the editor and the OS.
	* "nextGrepBuf" (bound to 'C-c ]'), and "prevGrepBuf" (bound to
	  'C-c ['), which switch to the next or previous buffer from the
	  result of the most recent "grepFiles" invocation.
 6. Changed the user startup file .memacs to create a write hook which will
    check if the file that is about to be written already exists and is a
    symbolic or hard link.  If so, it will ask the user if the link should be
    broken before writing, thereby preserving the original file.
 7. The Red Hat Linux binary has been replaced with an equivalent one built on
    CentOS Linux, and a new Debian Linux binary is now included.

8.2.0	11 Mar 2016
 1. Made search and replacement changes:
	* Search and replacement patterns may now be any length.
	* Options (formerly ":m") which are appended to a search pattern have
	  been expanded and now apply to non-Regexp patterns as well.  New
	  options are: "i" (ignore case), "e" (exact case), "r" (Regexp mode),
	  and "p" (plain text mode).  Also changed pattern parsing so that a
	  pattern such as "x:e" can be searched for literally by using a double
	  colon, as in "x::e".  Pattern options override the global modes
	  'regexp' and 'exact', so you may now perform any type of search (or
	  search and replace) by appending option(s) to the pattern instead of
	  adjusting the global modes first.  The two global modes are now used
	  as defaults only.
	* Escape characters \t (tab), \r (CR), \n (NL), and \f (FF) are now
	  available for use in regular expression search and replacement
	  patterns.
	* Escape characters \d (digit), \l (letter), \s (space), and \w (word)
	  are now available for use in regular expression character classes.
	* Escape characters \A (beginning of string), \D (non-digit), \L
	  (non-letter), \S (non-space), \W (non-word), \Z (end of string, but
	  before a CR), and \z (end of string) are now available for use in
	  regular expression search patterns.
	* Fixed ^ and $ processing so that they will match adjacent to an
	  imbedded CR character in a buffer line or string in addition to the
	  beginning or end of it.
	* Operators =~ and !~ may now be used in an expression to perform
	  regular expression matching.  The second (string) argument is assumed
	  to be a regular expression which may contain groups.
	* Changed the "index" and "sub" functions to operate in Regexp mode
	  and/or ignore case when ":r" and/or ":i" is appended to the pattern;
	  otherwise, plain text, case-sensitive mode.  Also changed "sub" to do
	  zero substitutions if n == 0, one substitution if n == 1 or is the
	  default, and all substitutions if n > 1.
	* Changed the "match" function to return groups from the last =~ or
	  "index" match by default, and from the last buffer search if an n
	  argument is given.
	* Changed $Match variable to return the last pattern match, whether from
	  a buffer search or a =~ match.
	* Renamed $ModeRegExp variable to $ModeRegexp to be consistent with the
	  global mode of the same name.
	* Modified regular expression search and replacement in a buffer or
	  string so that a match and replacement of an empty string without
	  advancement of the scanning position will cause processing to stop
	  (with an error message), and prevent an endless loop.
 2. Changed mark system so that it is more usable:
	* Replaced numeric marks with printable-character marks between ' ' and
	  '~' inclusive, and changed so that marks are tied to a buffer instead
	  of a window.  As a result, the same marks will exist in every window
	  that is displaying the same buffer.
	* Mark ' ' (space) is now the default mark and is used to define
	  regions.
	* Renamed "clearMark" command to "deleteMark" and added option to delete
	  all marks (except ' ') in the current buffer if an n argument is
	  specified.
	* Changed "setMark" and "swapMark" commands to use mark ' ' by default,
	  '.' if n < 0, and prompt for a mark otherwise.
	* Changed "gotoMark" to always prompt for a mark and changed its default
	  binding to 'M-SPC'.
	* Changed the "deleteMark", "gotoMark", and "swapMark" commands so that
	  existing marks are included in the prompt when requesting a mark
	  interactively.
	* Created "showMarks" command for displaying all the marks in the
	  current buffer in a pop-up window.
	* Changed the "defined?" function to check whether a mark exists and
	  (optionally) is also active, dependent on the n value.
    Now marks can be any printable character, are easier to remember, are tied
    to a buffer instead of a window, and can be displayed at any time.
 3. Made key binding syntax and related changes:
	* Renamed "xPrefix", "cPrefix", and "hPrefix" commands to "prefix1",
	  "prefix2", and "prefix3", respectively, and eliminated the "X-", "C-",
	  and "H-" prefixes for these commands.
	* Two-key sequences are now coded as two values separated by a space.
	* Control characters may now be coded as 'C-x' in addition to the
	  current '^x' form, although the new syntax is now preferred -- to be
	  consistent with 'M-' and 'S-' prefixes.
	* The escape, backspace, tab, and return keys may now be coded as 'ESC',
	  'DEL', 'TAB', and 'RTN' (in addition to 'SPC' for the spacebar) and
	  are now the preferred form for those characters.
	* Lower-case letters are now favored over upper case; for example, "C-a"
	  instead of "C-A".
	* Added all prefix pseudo commands and special ones like "universalArg"
	  to the "showBindings" display and the "bindKey" completion display,
	  and changed the "defined?" function to return "pseudo command" for all
	  of these commands.
 4. Added variable name completion, which is automatically enabled whenever a
    variable name is requested at a prompt (such as entering "C-x =" to set a
    variable) or by specifying the 'V' or 'v' type to the "prompt" system
    function (see first bullet in item #8).
 5. Created "fenceWord", "popFileList", and "showVar" macros and added to
    memacs.mm startup file (see memacs-macros.1 for details).  Also fixed issue
    where language tools were not always loaded or unloaded appropriately in
    certain situations when switching buffers.
 6. Made command changes:
	* Created "dupLine" command, which duplicates a block of lines in the
	  current buffer and places the cursor at the beginning of the
	  duplicated text.
	* Added option to "deleteWhite" command to delete non-word characters in
	  addition to white space if n > 0.
	* Changed "gotoLine" command to get the line number as its first
	  argument and operate on a specified buffer if an n argument is given.
	* Changed the "readFile" and "setBufFile" commands' default behavior to
	  change the current buffer name to one derived from the filename.
	* Changed "backWord", "forwWord", and "endWord" commands to return false
	  if move goes out of buffer; otherwise, true.
	* Changed "clearBuf" command to require a buffer name if n >= 0 and
	  force-clear if n != 0 so that the current buffer can be force-cleared
	  in a script via "-1 => clearBuf".
 7. Changed screen formatting such that a nearly complete mode line is displayed
    when the column width is between 80 and 95 columns instead of an abbreviated
    one as previously.
 8. Removed leading "!" character from directive names used in scripts and
    changed syntax so that a left paren may immediately follow the name (with
    the exception of the "macro" directive).  As a result, you may now for
    example, use "if(a == 1)" or "while x > 0" instead of "!if a == 1" and
    "!while x > 0" as before.
 9. Made system function changes:
	* Swapped the third ("delimiter") and fourth ("type") arguments of the
	  "prompt" function and changed it to process a fourth argument only if
	  not a completion type.  Also changed prompt types to [^]no auto,
	  [b]uf, [c]har, [f]ile, [s]tr, and [v|V]ar, where 'V' specifies all
	  variables and 'v' specifies mutable-only variables.
	* Changed "readBuf" function to use its n argument as a repeat count and
	  return the last line read.
	* Removed "pad" function, which can be done instead with the "%"
	  formatting operator or the "sprintf" function.
	* Changed "subLine" and "subString" functions so that the last argument
	  ("len") is optional and defaults to an infinite value.
	* Fixed bug in "subString" function where a negative offset that was
	  equal to the string length (such as "subString('abc',-3,3)" returned a
	  null string instead of a substring beginning at the first character.
	* Changed "dirname" function to return "." instead of null when the
	  pathname argument has no directory portion and an n argument is
	  specified.
	* Changed "whence" command to display information about the current line
	  instead of the whole buffer if an n argument is specified.
	* Changed "insert", "overwrite", "replaceText", and "writeBuf" functions
	  to insert CR characters literally if n < 0.
	* Created "void?" function which return true if its argument is nil or a
	  null string.
	* Created wordChar? system function, which returns true if a character
	  is in $wordChars.
	* Changed "push" and "unshift" functions to return the new variable
	  value instead of the argument value.
10. Replaced hook variables with new commands: "setHook" and "showHooks".  Also
    created "chDir" hook, which is invoked at program startup and whenever the
    current directory is changed.
11. Aliases may now be created for system functions as well as for commands and
    macros.
12. Made system variable changes:
	* Changed $BufSize variable to return the number of lines in the current
	  buffer instead of bytes, and created $BufLen, which returns the former
	  (bytes) value.
	* Changed $lineChar variable to return a string instead of an integer.
	* Replaced "bufWind" function with $WindList variable, which provides
	  more information about current windows.
13. Added -S switch which provides a means to execute a MightEMacs script
    contained in a file as a shell script.  All command line arguments are
    passed to the MightEMacs script.
14. Removed length restriction from keyboard macros and fixed issue where a
    keyboard macro would stop after one iteration if the $maxLoop variable was
    set to zero, instead of executing n times.
15. Removed "kecho" global mode and $ModeKeyEcho variable, and changed the
    "prompt" and "getKey" functions to suppress key echoing if the n argument is
    zero.
16. A \s (space) escape character is now recognized in a double-quoted string,
    and \b (backspace) has been removed.
17. The return value from the "exitBuf" hook (or nil if it is not defined) is
    now passed as an argument to the "enterBuf" hook, and both hooks are now
    called on hidden buffers, which were bypassed previously.
18. Changed handling of true, false, and nil in scripts:
	* In most cases, nil is now translated to a null string when converted
	  to a string, and Boolean values may not be converted and will generate
	  an error.
	* Moved the functionality of the "stringLit" function to "toString" and
	  deleted the former function.
	* Changed the "toString" function to (a), convert integer, string, and
	  nil values by default (and generate an error if Boolean); (b), accept
	  any type of value and convert it to human-readable form if n is not
	  the default; and (c), put double quotes around the result if n > 0 and
	  the original value was a string.
	* Changed the "print" function to always output "true" and "false" for
	  Boolean values and either a null string (default), or "nil" (if n <=
	  0) for nil.
19. Fixed issue where windows other than the current window that were all
    displaying the same buffer were not restored to their original state if the
    buffer was narrowed and then widened.
20. Fixed some other minor bugs.

8.1.1	14 Nov 2015
 1. Fixed various bugs, including an issue where entering a right brace in the
    first column of a line when C mode was enabled could cause random text to be
    deleted before the cursor; and an issue where backspacing did not work
    correctly if the cursor had previously moved past the right edge of the
    terminal window.
 2. Changed the license for the project to GNU General Public License (GPLv3).

8.1.0	25 Oct 2015
 1. Created "undelete" command, which restores the most recently deleted text
    from a deleteXXX or truncBuf command, and bound it to M-U.
 2. Renamed $loopMax variable to $maxLoop and created $maxRecursion variable,
    which sets the maximum recursion depth for any macro to prevent endless
    recursion and an "out of memory" crash.
 3. Changed the bang (!) to a carat (^) in the -G and -D switches to avoid
    conflicts with the shell's use of the bang character.
 4. Changed default architecture to 64 bit.
 5. Changed joinLines command to join lines with no space between them (instead
    of a single space) when invoked in a script with a nil argument, and created
    a corresponding macro (joinLines0) bound to X-^ so it can be used
    interactively.
 6. Fixed some minor bugs.
 7. Simplified the installation procedure.

8.0.0	29 Sep 2015
 1. First public release.
